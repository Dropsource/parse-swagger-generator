package dropsource.tools.swagger.generators

import dropsource.tools.swagger.parse.{ParseType, SwaggerType}
import io.swagger.models._
import io.swagger.models.parameters._
import io.swagger.models.properties.{EmailProperty, ObjectProperty, RefProperty}

object PathsGenerator {
  def defaultPaths(definition: ModelImpl): Map[String, Path] = Map(
    s"/classes/${definition.getName}/{objectId}" -> new Path()
      .get(new Operation().summary(s"Retrieve a ${definition.getName}").tag(definition.getName)
        .parameter(new RefParameter("objectId"))
        .response(200, new Response().schema(new RefProperty(definition.getName)).description("Success"))
        .response(400, new RefResponse("BadRequest"))
      )
      .put(new Operation().summary(s"Update a ${definition.getName}").tag(definition.getName)
        .parameter(new RefParameter("objectId"))
        .response(200, new RefResponse("Updated"))
        .response(400, new RefResponse("BadRequest"))
      )
      .delete(new Operation().summary(s"Delete a ${definition.getName}").tag(definition.getName)
        .parameter(new RefParameter("objectId"))
        .response(200, new RefResponse("Deleted"))
        .response(400, new RefResponse("BadRequest"))
      ),
    s"/classes/${definition.getName}" -> new Path()
      .post(new Operation().summary(s"Create a ${definition.getName}").tag(definition.getName)
        .parameter(new BodyParameter().name(definition.getName.toLowerCase).schema(new RefModel(definition.getName)))
        .response(201, new Response().schema(new RefProperty(DefinitionsGenerator.created.getName)).description("Created"))
        .response(400, new RefResponse("BadRequest"))
      )
      .get(new Operation().summary(s"Query a ${definition.getName}").tag(definition.getName)
        .response(200, new Response().schema(new RefProperty(definition.getName + "Query")).description("Success"))
        .response(400, new RefResponse("BadRequest"))
        .parameter(new RefParameter("where"))
        .parameter(new RefParameter("order"))
        .parameter(new RefParameter("limit"))
        .parameter(new RefParameter("skip"))
        .parameter(new RefParameter("keys"))
        .parameter(new RefParameter("include"))
      )
  )

  def userPaths(user: ModelImpl): Map[String, Path] = Map(
    s"/users" -> new Path() // TODO expand for linking users to 3rd party services using authData
      .post(new Operation().summary("Sign Up a " + user.getName).tag(user.getName)
      .parameter(new BodyParameter().name("user").schema(new RefModel(user.getName)))
      .parameter(new RefParameter("X-Parse-Revocable-Session"))
      .response(201, new Response().schema(new RefProperty(DefinitionsGenerator.userSignedUp.getName)).description("Success").header("Location", ParseType(ParseType.STRING).toSwaggerProperty("Location").description("URL where the user object lives")))
      .response(400, new RefResponse("BadRequest"))
    )
      .get(new Operation().summary(s"Query a " + user.getName).tag(user.getName)
        .response(200, new Response().schema(new RefProperty(user.getName + "Query")).description("Success"))
        .response(400, new RefResponse("BadRequest"))
        .parameter(new RefParameter("where"))
        .parameter(new RefParameter("order"))
        .parameter(new RefParameter("limit"))
        .parameter(new RefParameter("skip"))
        .parameter(new RefParameter("keys"))
        .parameter(new RefParameter("include"))
      ),
    s"/users/me" -> new Path()
      .get(new Operation().summary(s"Retrieve the current ${user.getName}").tag(user.getName)
        .parameter(new RefParameter("X-Parse-Session-Token"))
        .response(200, new Response().schema(new RefProperty(user.getName)).description("Success"))
        .response(400, new RefResponse("BadRequest"))
      ),
    s"/users/{objectId}" -> new Path()
      .get(new Operation().summary(s"Retrieve a ${user.getName}").tag(user.getName)
        .parameter(new RefParameter("objectId"))
        .response(200, new Response().schema(new ObjectProperty()).description("Success"))
        .response(400, new RefResponse("BadRequest"))
      )
      .delete(new Operation().summary(s"Deleting the current ${user.getName}").tag(user.getName)
        .parameter(new RefParameter("objectId"))
        .parameter(new RefParameter("X-Parse-Session-Token"))
        .response(200, new RefResponse("Deleted"))
        .response(400, new RefResponse("BadRequest"))
      )
      .put(new Operation().summary(s"Updating the current ${user.getName}").tag(user.getName)
        .parameter(new BodyParameter().name("user").schema(new RefModel(user.getName)))
        .parameter(new RefParameter("objectId"))
        .parameter(new RefParameter("X-Parse-Session-Token"))
        .response(200, new RefResponse("Updated"))
        .response(400, new RefResponse("BadRequest"))
      ),
    s"/login" -> new Path()
      .get(new Operation().summary("Login a User").tag(user.getName)
        .parameter(new FormParameter().name("username").`type`(SwaggerType.STRING.`type`).required(true))
        .parameter(new FormParameter().name("password").`type`(SwaggerType.PASSWORD.`type`).format(SwaggerType.PASSWORD.format).required(true))
        .parameter(new RefParameter("X-Parse-Revocable-Session"))
        .response(201, new Response().schema(new RefProperty(DefinitionsGenerator.userLoggedIn(user).getName)).description("Success").header("Location", ParseType(ParseType.STRING).toSwaggerProperty("Location")))
        .response(400, new RefResponse("BadRequest"))
      ),
    s"/requestPasswordReset" -> new Path()
      .post(new Operation().summary(s"Reset a ${user.getName} Password").tag(user.getName)
        .parameter(new BodyParameter().schema(new ModelImpl().name("resetPassword").property("email", new EmailProperty())))
        .response(201, new Response().schema(new ObjectProperty()).description("Success"))
        .response(400, new RefResponse("BadRequest"))
      )
  )

  def filePaths: Map[String, Path] = Map(
    s"/files/{fileName}" -> new Path()
      .post(new Operation().summary(s"Upload a file").tag(ParseType.FILE)
        .parameter(new PathParameter().name("fileName").`type`(SwaggerType.STRING.`type`).description("Name of the file (image.jpg)"))
        .parameter(new FormParameter().`type`(SwaggerType.FILE.`type`).description("File To Upload"))
        .response(200, new Response().schema(new RefProperty(DefinitionsGenerator.fileUploaded.getName)).description("File Uploaded Successfully"))
        .response(400, new RefResponse("BadRequest"))
      )
      .delete(new Operation().summary(s"Delete a file").tag(ParseType.FILE)
        .parameter(new PathParameter().name("fileName").`type`(SwaggerType.STRING.`type`).description("Name of the file (image.jpg)"))
        .response(200, new RefResponse("Deleted"))
        .response(400, new RefResponse("BadRequest"))
      )
//      .put(new Operation().summary(s"Updating the current ${user.getName}").tag(user.getName)
//        .parameter(new RefParameter("objectId"))
//        .parameter(new RefParameter("X-Parse-Session-Token"))
//        .response(200, new RefResponse("Updated"))
//        .response(400, new RefResponse("BadRequest"))
//      )
  )
}